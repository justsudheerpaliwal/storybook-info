"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _global = require("global");

var _core = require("@emotion/core");

var _styled = _interopRequireDefault(require("@emotion/styled"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _dimensions = _interopRequireDefault(require("./dimensions"));

var GlobalStyles = function GlobalStyles() {
  return _react.default.createElement(_core.Global, {
    styles:
    /*#__PURE__*/

    /*#__PURE__*/
    (0, _core.css)(".Resizer{position:relative;z-index:1;display:flex;align-items:center;justify-content:center;}.Resizer.horizontal{height:10px;margin:-5px 0;border-top:5px solid transparent;border-bottom:5px solid transparent;cursor:row-resize;width:100%;}.Resizer.horizontal::after{content:'';display:block;height:2px;width:20px;border-top:1px solid rgba(0,0,0,0.2);border-bottom:1px solid rgba(0,0,0,0.2);}.Resizer.vertical{width:10px;margin:0 -5px;border-left:5px solid transparent;border-right:5px solid transparent;cursor:col-resize;}.Resizer.vertical::after{content:'';display:block;width:2px;height:20px;border-left:1px solid rgba(0,0,0,0.2);border-right:1px solid rgba(0,0,0,0.2);}.Resizer.disabled{visibility:hidden;}")
  });
};

var StoriesPanelWrapper =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "e97yylu0"
})(function (_ref) {
  var showStoriesPanel = _ref.showStoriesPanel,
      storiesPanelOnTop = _ref.storiesPanelOnTop;
  return {
    boxSizing: 'border-box',
    width: '100%',
    height: '100%',
    display: showStoriesPanel ? 'flex' : 'none',
    flexDirection: storiesPanelOnTop ? 'column' : 'row',
    alignItems: 'stretch',
    paddingRight: storiesPanelOnTop ? 10 : 0
  };
});
var StoriesPanelInner =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "e97yylu1"
})({
  flexGrow: 1,
  position: 'relative',
  height: '100%',
  width: '100%',
  overflow: 'auto'
});
var AddonPanelWrapper =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "e97yylu2"
})(function (_ref2) {
  var showAddonPanel = _ref2.showAddonPanel,
      addonPanelInRight = _ref2.addonPanelInRight,
      layoutMargin = _ref2.theme.layoutMargin;
  return {
    display: showAddonPanel ? 'flex' : 'none',
    flexDirection: addonPanelInRight ? 'row' : 'column',
    alignItems: 'stretch',
    position: 'absolute',
    width: '100%',
    height: '100%',
    padding: addonPanelInRight ? "".concat(layoutMargin, "px ").concat(layoutMargin, "px ").concat(layoutMargin, "px 0") : "0 ".concat(layoutMargin, "px ").concat(layoutMargin, "px 0"),
    boxSizing: 'border-box'
  };
});
var ContentPanel =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "e97yylu3"
})(function (_ref3) {
  var addonPanelInRight = _ref3.addonPanelInRight,
      storiesPanelOnTop = _ref3.storiesPanelOnTop,
      layoutMargin = _ref3.theme.layoutMargin;
  return {
    position: 'absolute',
    boxSizing: 'border-box',
    width: '100%',
    height: '100%',
    padding: addonPanelInRight ? "".concat(layoutMargin, "px 0 ").concat(layoutMargin, "px 0") : "".concat(layoutMargin, "px ").concat(layoutMargin, "px 0 0"),
    paddingTop: storiesPanelOnTop ? 0 : layoutMargin
  };
});
var PreviewWrapper =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "e97yylu4"
})(function (_ref4) {
  var theme = _ref4.theme;
  return {
    width: '100%',
    height: '100%',
    boxSizing: 'border-box',
    overflow: 'auto',
    WebkitOverflowScrolling: 'touch',
    position: 'relative',
    backgroundColor: theme.mainFill
  };
}, function (_ref5) {
  var fullscreen = _ref5.fullscreen,
      theme = _ref5.theme;
  return fullscreen ? {
    position: 'fixed',
    left: 0,
    right: 0,
    top: 0,
    zIndex: 1,
    border: 0,
    margin: 0,
    padding: 0
  } : {
    border: theme.mainBorder,
    borderRadius: theme.mainBorderRadius,
    display: 'flex',
    justifyItems: 'center',
    alignItems: 'center',
    '& > *': {
      margin: 'auto'
    }
  };
});
var DragBlockOverlay =
/*#__PURE__*/
(0, _styled.default)("div", {
  target: "e97yylu5"
})(function (_ref6) {
  var isDragging = _ref6.isDragging;
  return {
    zIndex: isDragging ? 2 : 0,
    display: isDragging ? 'block' : 'none',
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
});
var defaultSizes = {
  addonPanel: {
    down: 200,
    right: 400
  },
  storiesPanel: {
    left: 250,
    top: 400
  }
};

var _saveSizes = function saveSizes(sizes) {
  try {
    _global.localStorage.setItem('panelSizes', JSON.stringify(sizes));

    return true;
  } catch (e) {
    return false;
  }
};

var getSavedSizes = function getSavedSizes(sizes) {
  try {
    var panelSizes = _global.localStorage.getItem('panelSizes');

    if (panelSizes) {
      return JSON.parse(panelSizes);
    }

    _saveSizes(sizes);

    return sizes;
  } catch (e) {
    _saveSizes(sizes);

    return sizes;
  }
};

var Layout =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Layout, _Component);

  function Layout(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Layout);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Layout).call(this, props));
    _this.layerSizes = getSavedSizes(defaultSizes);
    _this.state = {
      previewPanelDimensions: {
        height: 0,
        width: 0
      },
      isDragging: false
    };
    _this.throttledUpdatePreviewPanelState = (0, _lodash.default)(_this.updatePrevewPanelState.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this))), 200);
    _this.throttledSaveSizes = (0, _lodash.default)(_this.saveSizes, 25);
    _this.onDragStart = _this.onDragStart.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    _this.onDragEnd = _this.onDragEnd.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    return _this;
  }

  (0, _createClass2.default)(Layout, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      _global.window.addEventListener('resize', this.throttledUpdatePreviewPanelState);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _global.window.removeEventListener('resize', this.throttledUpdatePreviewPanelState);
    }
  }, {
    key: "onDragStart",
    value: function onDragStart() {
      this.setState({
        isDragging: true
      });
    }
  }, {
    key: "onDragEnd",
    value: function onDragEnd() {
      this.setState({
        isDragging: false
      });
    }
  }, {
    key: "onResize",
    value: function onResize(pane, mode, size) {
      this.throttledSaveSizes(pane, mode, size);
      this.throttledUpdatePreviewPanelState();
    }
  }, {
    key: "saveSizes",
    value: function saveSizes(pane, mode, size) {
      this.layerSizes[pane][mode] = size;

      _saveSizes(this.layerSizes);
    }
  }, {
    key: "updatePrevewPanelState",
    value: function updatePrevewPanelState() {
      var _this$previewPanelRef = this.previewPanelRef,
          clientWidth = _this$previewPanelRef.clientWidth,
          clientHeight = _this$previewPanelRef.clientHeight;
      this.setState({
        previewPanelDimensions: {
          width: clientWidth,
          height: clientHeight
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          goFullScreen = _this$props.goFullScreen,
          showStoriesPanel = _this$props.showStoriesPanel,
          showAddonPanel = _this$props.showAddonPanel,
          addonPanelInRight = _this$props.addonPanelInRight,
          AddonPanel = _this$props.addonPanel,
          StoriesPanel = _this$props.storiesPanel,
          Preview = _this$props.preview;
      var _this$state = this.state,
          previewPanelDimensions = _this$state.previewPanelDimensions,
          isDragging = _this$state.isDragging;
      var storiesPanelOnTop = false;
      var addonSplit = addonPanelInRight ? 'vertical' : 'horizontal';
      var storiesSplit = storiesPanelOnTop ? 'horizontal' : 'vertical';
      var sizes = getSavedSizes(this.layerSizes);
      var storiesPanelDefaultSize = !storiesPanelOnTop ? sizes.storiesPanel.left : sizes.storiesPanel.top;
      var addonPanelDefaultSize = !addonPanelInRight ? sizes.addonPanel.down : sizes.addonPanel.right;
      return _react.default.createElement(_reactSplitPane.default, {
        split: storiesSplit,
        allowResize: showStoriesPanel,
        minSize: 1,
        maxSize: -400,
        size: showStoriesPanel ? storiesPanelDefaultSize : 1,
        defaultSize: storiesPanelDefaultSize,
        onDragStarted: this.onDragStart,
        onDragFinished: this.onDragEnd,
        onChange: function onChange(size) {
          return _this2.onResize('storiesPanel', storiesPanelOnTop ? 'top' : 'left', size);
        }
      }, _react.default.createElement(StoriesPanelWrapper, {
        showStoriesPanel: showStoriesPanel,
        storiesPanelOnTop: storiesPanelOnTop
      }, _react.default.createElement(GlobalStyles, null), _react.default.createElement(StoriesPanelInner, null, _react.default.createElement(StoriesPanel, null))), _react.default.createElement(_reactSplitPane.default, {
        split: addonSplit,
        allowResize: showAddonPanel,
        primary: "second",
        minSize: addonPanelInRight ? 200 : 100,
        maxSize: -200,
        size: showAddonPanel ? addonPanelDefaultSize : 1,
        defaultSize: addonPanelDefaultSize,
        onDragStarted: this.onDragStart,
        onDragFinished: this.onDragEnd,
        onChange: function onChange(size) {
          return _this2.onResize('addonPanel', addonPanelInRight ? 'right' : 'down', size);
        }
      }, _react.default.createElement(ContentPanel, {
        addonPanelInRight: addonPanelInRight,
        storiesPanelOnTop: storiesPanelOnTop
      }, _react.default.createElement(DragBlockOverlay, {
        isDragging: isDragging
      }), _react.default.createElement(PreviewWrapper, {
        fullscreen: goFullScreen,
        innerRef: function innerRef(ref) {
          _this2.previewPanelRef = ref;
        }
      }, _react.default.createElement(Preview, null), _react.default.createElement(_dimensions.default, previewPanelDimensions))), _react.default.createElement(AddonPanelWrapper, {
        showAddonPanel: showAddonPanel,
        addonPanelInRight: addonPanelInRight
      }, _react.default.createElement(AddonPanel, null))));
    }
  }]);
  return Layout;
}(_react.Component);

Layout.propTypes = {
  showStoriesPanel: _propTypes.default.bool.isRequired,
  showAddonPanel: _propTypes.default.bool.isRequired,
  goFullScreen: _propTypes.default.bool.isRequired,
  storiesPanel: _propTypes.default.func.isRequired,
  preview: _propTypes.default.func.isRequired,
  addonPanel: _propTypes.default.func.isRequired,
  addonPanelInRight: _propTypes.default.bool.isRequired
};
var _default = Layout;
exports.default = _default;