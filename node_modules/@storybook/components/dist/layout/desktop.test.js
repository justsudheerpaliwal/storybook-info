"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _desktop = _interopRequireDefault(require("./desktop"));

var StoriesPanel = function StoriesPanel() {
  return null;
};

var AddonPanel = function AddonPanel() {
  return null;
};

var Preview = function Preview() {
  return null;
};

var SearchBox = function SearchBox() {
  return null;
};

var ShortcutsHelp = function ShortcutsHelp() {
  return null;
};

var componentStubs = {
  storiesPanel: function storiesPanel() {
    return _react.default.createElement(StoriesPanel, null);
  },
  addonPanel: function addonPanel() {
    return _react.default.createElement(AddonPanel, null);
  },
  preview: function preview() {
    return _react.default.createElement(Preview, null);
  },
  searchBox: function searchBox() {
    return _react.default.createElement(SearchBox, null);
  },
  shortcutsHelp: function shortcutsHelp() {
    return _react.default.createElement(ShortcutsHelp, null);
  }
};
describe('manager.ui.components.layout.index', function () {
  describe('with default options', function () {
    test('should render provided components', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_desktop.default, (0, _extends2.default)({
        showStoriesPanel: true,
        showAddonPanel: true,
        addonPanelInRight: false,
        goFullScreen: false
      }, componentStubs)));
      expect(wrap.find('storiesPanel')).toBeTruthy();
      expect(wrap.find('addonPanel')).toBeTruthy();
      expect(wrap.find('preview')).toBeTruthy();
    });
    test('should render correct splits', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_desktop.default, (0, _extends2.default)({
        showStoriesPanel: true,
        showAddonPanel: true,
        addonPanelInRight: false,
        goFullScreen: false
      }, componentStubs)));
      expect(wrap.find('storiesPanel').closest('SplitPane')).toHaveProp({
        size: 250,
        split: 'vertical'
      });
      expect(wrap.find('preview').closest('SplitPane')).toHaveProp({
        size: 200,
        split: 'horizontal'
      });
    });
  });
  describe('with goFullScreen=true', function () {
    test('should render preview in fullscreen mode', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_desktop.default, (0, _extends2.default)({
        goFullScreen: true,
        showAddonPanel: false,
        showStoriesPanel: false,
        addonPanelInRight: false
      }, componentStubs)));
      expect(wrap.find('preview').parent()).toHaveProp({
        fullscreen: true
      });
    });
  });
  describe('with showStoriesPanel=false', function () {
    test('should hide the storiesPanel', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_desktop.default, (0, _extends2.default)({
        showStoriesPanel: false,
        showAddonPanel: true,
        addonPanelInRight: false,
        goFullScreen: false
      }, componentStubs)));
      expect(wrap.find('storiesPanel').closest('SplitPane')).toHaveProp({
        size: 1,
        split: 'vertical'
      });
    });
  });
  describe('with showAddonPanel=false', function () {
    test('should hide the addonPanel', function () {
      var wrap = (0, _enzyme.shallow)(_react.default.createElement(_desktop.default, (0, _extends2.default)({
        showStoriesPanel: true,
        showAddonPanel: false,
        goFullScreen: false,
        addonPanelInRight: false
      }, componentStubs)));
      expect(wrap.find('addonPanel').parent()).toHaveProp({
        showAddonPanel: false
      });
    });
  });
});